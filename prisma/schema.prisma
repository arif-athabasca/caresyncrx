generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id         String   @id
  patientId  String?
  userId     String?
  action     String
  details    Json?
  ip_address String?  @db.VarChar(45)
  user_agent String?
  timestamp  DateTime @default(now()) @db.Timestamptz(6)
  Patient    Patient? @relation(fields: [patientId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([patientId])
  @@index([timestamp])
  @@index([userId])
}

model BillingRecord {
  id          String        @id
  patientId   String
  providerId  String
  serviceDate DateTime      @db.Date
  serviceCode String
  description String
  amount      Decimal       @db.Decimal(10, 2)
  status      BillingStatus @default(PENDING)
  insuranceId String?
  claimNumber String?
  submittedAt DateTime?
  processedAt DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Patient     Patient       @relation(fields: [patientId], references: [id])
  User        User          @relation(fields: [providerId], references: [id])

  @@index([patientId])
  @@index([providerId])
  @@index([serviceCode])
  @@index([status])
  @@index([submittedAt])
}

model CareAction {
  id            String        @id
  triageId      String
  actionType    String
  description   String
  status        ActionStatus  @default(PENDING)
  dueDate       DateTime?
  completedAt   DateTime?
  completedById String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  User          User?         @relation(fields: [completedById], references: [id])
  PatientTriage PatientTriage @relation(fields: [triageId], references: [id], onDelete: Cascade)

  @@index([completedById])
  @@index([status])
  @@index([triageId])
}

model Clinic {
  id      String    @id
  name    String
  address String
  Patient Patient[]
  User    User[]
}

model InsuranceProvider {
  id               String             @id
  name             String
  contactInfo      String?
  billingDetails   String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  PatientInsurance PatientInsurance[]
}

model LoginAttempt {
  id        String   @id
  email     String   @db.VarChar(255)
  ipAddress String   @db.VarChar(45)
  userAgent String?
  createdAt DateTime @default(now())
  success   Boolean  @default(false)

  @@index([createdAt])
  @@index([email])
  @@index([ipAddress])
}

model PasswordResetToken {
  id        String   @id
  userId    String
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([tokenHash])
  @@index([userId])
}

model Patient {
  id               String             @id
  firstName        String
  lastName         String
  dateOfBirth      DateTime           @db.Date
  language         String
  clinicId         String
  AuditLog         AuditLog[]
  BillingRecord    BillingRecord[]
  Clinic           Clinic             @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  PatientInsurance PatientInsurance[]
  PatientTriage    PatientTriage[]
  Prescription     Prescription[]
  ScheduleSlot     ScheduleSlot[]
  Task             Task[]

  @@index([clinicId])
  @@index([firstName, lastName])
}

model PatientInsurance {
  id                  String            @id
  patientId           String
  insuranceProviderId String
  policyNumber        String
  groupNumber         String?
  coverageStartDate   DateTime          @db.Date
  coverageEndDate     DateTime?         @db.Date
  isPrimary           Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  InsuranceProvider   InsuranceProvider @relation(fields: [insuranceProviderId], references: [id])
  Patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([insuranceProviderId])
  @@index([patientId])
}

model PatientTriage {
  id                                    String         @id
  patientId                             String?
  symptoms                              String
  urgencyLevel                          TriageUrgency  @default(MEDIUM)
  notes                                 String?
  status                                TriageStatus   @default(PENDING)
  assignedToId                          String?
  assignedBy                            String?
  assignmentReason                      String?
  aiSuggestion                          Json?
  createdAt                             DateTime       @default(now())
  updatedAt                             DateTime
  CareAction                            CareAction[]
  User_PatientTriage_assignedByToUser   User?          @relation("PatientTriage_assignedByToUser", fields: [assignedBy], references: [id])
  User_PatientTriage_assignedToIdToUser User?          @relation("PatientTriage_assignedToIdToUser", fields: [assignedToId], references: [id])
  Patient                               Patient?       @relation(fields: [patientId], references: [id])
  ScheduleSlot                          ScheduleSlot[]

  @@index([assignedToId])
  @@index([patientId])
  @@index([status])
  @@index([urgencyLevel])
}

model Prescription {
  id         String    @id
  patientId  String
  drugName   String
  dosage     String
  issueDate  DateTime  @db.Timestamptz(6)
  refillDate DateTime? @db.Timestamptz(6)
  status     RxStatus  @default(ACTIVE)
  userId     String
  Patient    Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [userId], references: [id])
  Task       Task[]

  @@index([patientId])
  @@index([status])
  @@index([userId])
}

model ProviderAvailability {
  id          String   @id
  providerId  String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  maxPatients Int      @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, dayOfWeek, startTime, endTime])
  @@index([dayOfWeek])
  @@index([isAvailable])
  @@index([providerId])
}

model ProviderNote {
  id         String   @id
  providerId String
  noteText   String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  User       User     @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Task       Task[]

  @@index([providerId])
}

model ProviderSpecialty {
  id                String   @id
  providerId        String
  specialty         String
  expertise         String[]
  procedures        String[]
  urgencyLevel      String[]
  yearsExp          Int?
  isCertified       Boolean  @default(true)
  certificationBody String?
  registrationNum   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([specialty])
}

model ProviderWorkload {
  id              String   @id
  providerId      String
  date            DateTime @db.Date
  totalSlots      Int      @default(0)
  bookedSlots     Int      @default(0)
  availableSlots  Int      @default(0)
  emergencySlots  Int      @default(0)
  utilizationRate Decimal  @db.Decimal(5, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, date])
  @@index([date])
  @@index([providerId])
  @@index([utilizationRate])
}

model RefreshToken {
  id          String   @id
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  isValid     Boolean  @default(true)
  deviceId    String?
  fingerprint String?
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([fingerprint])
  @@index([token])
  @@index([userId])
}

model ScheduleSlot {
  id              String         @id
  providerId      String
  patientId       String?
  triageId        String?
  startTime       DateTime
  endTime         DateTime
  appointmentType String
  status          String         @default("AVAILABLE")
  description     String?
  location        String?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  Patient         Patient?       @relation(fields: [patientId], references: [id])
  User            User           @relation(fields: [providerId], references: [id], onDelete: Cascade)
  PatientTriage   PatientTriage? @relation(fields: [triageId], references: [id])

  @@index([endTime])
  @@index([patientId])
  @@index([providerId])
  @@index([startTime])
  @@index([status])
  @@index([triageId])
}

model SecurityAuditLog {
  id          String   @id
  timestamp   DateTime @default(now())
  eventType   String   @db.VarChar(50)
  severity    String   @db.VarChar(20)
  userId      String?  @db.VarChar(50)
  username    String?  @db.VarChar(255)
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?
  path        String?  @db.VarChar(255)
  method      String?  @db.VarChar(10)
  description String
  metadata    String?

  @@index([eventType])
  @@index([ipAddress])
  @@index([severity])
  @@index([timestamp])
  @@index([userId])
}

model Task {
  id             String        @id
  description    String
  dueDate        DateTime?     @db.Date
  priority       String?
  status         String?
  providerId     String
  patientId      String?
  providerNoteId String?
  prescriptionId String?
  Patient        Patient?      @relation(fields: [patientId], references: [id])
  Prescription   Prescription? @relation(fields: [prescriptionId], references: [id])
  User           User          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  ProviderNote   ProviderNote? @relation(fields: [providerNoteId], references: [id])

  @@index([patientId])
  @@index([prescriptionId])
  @@index([providerId])
  @@index([providerNoteId])
}

model TwoFactorSetup {
  userId      String   @id
  secret      String
  verified    Boolean  @default(false)
  backupCodes String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                             String                 @id
  email                                          String                 @unique
  password                                       String
  firstName                                      String
  lastName                                       String
  status                                         String                 @default("ACTIVE") @db.VarChar(20)
  role                                           UserRole               @default(NURSE)
  clinicId                                       String
  failedLoginAttempts                            Int                    @default(0)
  lastFailedLogin                                DateTime?
  lastPasswordChange                             DateTime               @default(now())
  lockedUntil                                    DateTime?
  passwordExpiresAt                              DateTime
  backupCodes                                    String[]               @default([])
  twoFactorEnabled                               Boolean                @default(false)
  twoFactorMethod                                String?                @db.VarChar(20)
  twoFactorSecret                                String?
  lastVerifyAttempt                              DateTime?
  verifyAttempts                                 Int                    @default(0)
  createdAt                                      DateTime               @default(now())
  updatedAt                                      DateTime
  AuditLog                                       AuditLog[]
  BillingRecord                                  BillingRecord[]
  CareAction                                     CareAction[]
  PasswordResetToken                             PasswordResetToken[]
  PatientTriage_PatientTriage_assignedByToUser   PatientTriage[]        @relation("PatientTriage_assignedByToUser")
  PatientTriage_PatientTriage_assignedToIdToUser PatientTriage[]        @relation("PatientTriage_assignedToIdToUser")
  Prescription                                   Prescription[]
  ProviderAvailability                           ProviderAvailability[]
  ProviderNote                                   ProviderNote[]
  ProviderSpecialty                              ProviderSpecialty[]
  ProviderWorkload                               ProviderWorkload[]
  RefreshToken                                   RefreshToken[]
  ScheduleSlot                                   ScheduleSlot[]
  Task                                           Task[]
  TwoFactorSetup                                 TwoFactorSetup?
  Clinic                                         Clinic                 @relation(fields: [clinicId], references: [id])
  UserDevice                                     UserDevice[]

  @@index([clinicId])
  @@index([email])
  @@index([firstName, lastName])
}

model UserDevice {
  id             String       @id
  userId         String
  deviceId       String
  userAgent      String?
  lastUsed       DateTime     @default(now())
  createdAt      DateTime     @default(now())
  blockedUntil   DateTime?
  deviceName     String?
  deviceType     String?
  failedAttempts Int          @default(0)
  isVerified     Boolean      @default(false)
  lastIpAddress  String?      @db.VarChar(45)
  location       String?
  status         DeviceStatus @default(PENDING_VERIFICATION)
  trustLevel     Int          @default(0)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([deviceId])
  @@index([status])
  @@index([userId])
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BillingStatus {
  PENDING
  SUBMITTED
  PAID
  DENIED
  PARTIAL
}

enum DeviceStatus {
  ACTIVE
  SUSPENDED
  BLOCKED
  PENDING_VERIFICATION
}

enum NotificationType {
  PRESCRIPTION_CREATED
  PRESCRIPTION_UPDATED
  TRIAGE_ALERT
  DIAGNOSIS_READY
}

enum RxStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum TriageStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TriageUrgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PHARMACIST
  NURSE
  PATIENT
  CAREGIVER
  TECHNICIAN
  GUEST
}
